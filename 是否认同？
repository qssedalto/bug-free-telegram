import SwiftUI

fileprivate extension String {
    static let incrementNKey = "incrementN"
    static let dateKey = "dateKey"
}

struct ContentView: View {
    @State private var showConfirmation = false
    @State private var developerForgives = false
    @State private var showImmediatelyRecognize = false
    @State private var n: Int
    
    @State private var showDisagree = false
    
    @State private var bgColor: Color = .white
    
    init() {
        self.showDisagree = false
        self.showConfirmation = false
        self.developerForgives = false
        var n = UserDefaults.standard.integer(forKey: .incrementNKey)
        n = (n == 0 ? 7 : n)
        
        let timestamp = UserDefaults.standard.double(forKey: .dateKey)
        let lastDate: Date
        if timestamp == 0 {
            lastDate = Date()
        }
        else {
            lastDate = Date(timeIntervalSince1970: timestamp)
        }
        let today = Date()
        let diff: DateComponents = Calendar.current.dateComponents([.second], from: lastDate, to: today)
        let day = diff.second ?? 0
        
        if day > 5 {
            n += 1
        }
        
        
        self.n = n
        print(n)
        
        
        DispatchQueue.global().async {
            UserDefaults.standard.set(n, forKey: .incrementNKey)
            UserDefaults.standard.set(today.timeIntervalSince1970, forKey: .dateKey)
        }
    }
    
    var body: some View {
        NavigationView {
            VStack {
                Spacer()
                
                Text("是否认同焦晨阳是大傻逼？")
                    .font(.title)
                    .bold()
                    .multilineTextAlignment(.center)
                    .padding()
                
                Spacer()
                
                Button(action: {
                    showConfirmation = true
                }) {
                    Text("认同")
                        .font(.body)
                        .foregroundColor(.white)
                        .frame(width: 120, height: 40)
                        .background(Color.blue)
                        .cornerRadius(8)
                }
                .padding()
                
                Button(action: {
                    
                    showImmediatelyRecognize = true
                }) {
                    Text("非常认同")
                        .font(.body)
                        .foregroundColor(.white)
                        .frame(width: 120, height: 40)
                        .background(Color.green)
                        .cornerRadius(8)
                }
                .padding()
                
                Button(action: {
                    bgColor = .red
                    showDisagree = true
                }) {
                    Text("不认同")
                        .font(.body)
                        .foregroundColor(.white)
                        .frame(width: 120, height: 40)
                        .background(Color.red)
                        .cornerRadius(8)
                }
                .padding()
                
                Spacer()
            }
            .navigationBarTitle("开发者の问题🙋", displayMode: .large)
            .sheet(isPresented: $showConfirmation) {
                //                ConfirmationView(developerForgives: $developerForgives, showConfirmation: $showConfirmation, a: calculateA())
                ConfirmationView(showConfirmation: $showConfirmation, a: calculateA())
            }
            //            .onReceive(timer) { _ in
            //                incrementN()
            //            }
            .sheet(isPresented: $showImmediatelyRecognize) {
                ImmediatelyRecognizeView()
            }
            .sheet(isPresented: $showDisagree) {
                DisagreeView(bgColor: $bgColor)
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(bgColor)
        }
        .navigationViewStyle(.stack)
    }
    
    func calculateA() -> Int {
        //        let a = Int((686 * pow(1.05, Double(n - 3))) + (70 * pow(1.05, Double(n - 1))) + (49 * pow(1.05, Double(n - 4))) + (21 * pow(1.05, Double(n - 5))))
        let result = lround((686 * pow(1.05, Double(n - 3))) + (70 * pow(1.05, Double(n - 1))) + (49 * pow(1.05, Double(n - 4))) + (21 * pow(1.05, Double(n - 5))))
        print(result)
        let a = Int(result)
        return max(a, 0)
    }
    
    //    func incrementN() {
    //        // 在每天零点后自动增加n的值
    //        n += 1
    //    }
    
    //    let timer = Timer.publish(every: 24 * 60 * 60, on: .main, in: .common).autoconnect()
}

struct ConfirmationView: View {
    //    @Binding var developerForgives: Bool
    @State private var developerForgives: Bool = false
    @Binding var showConfirmation: Bool
    var a: Int
    
    var body: some View {
        VStack {
            Text("你怎么能仅仅这样认为呢？")
                .font(.title)
                .bold()
                .padding()
            
            Spacer()
            
            Button(action: {
                //                developerForgives = true
                //                showConfirmation = false
                
                if developerForgives {
                    showConfirmation = false
                }
                else {
                    // 显示价格
                    developerForgives = true
                }
            }) {
                Text("对不起")
                    .font(.body)
                    .foregroundColor(.white)
                    .frame(width: 120, height: 40)
                    .background(Color.purple)
                    .cornerRadius(8)
            }
            .padding()
            
            if developerForgives {
                Text("开发者原谅你了，请你协助开发者向焦晨阳索要合同欠款\(a)元，开发者向你道谢！")
                    .font(.title)
                    .bold()
                    .padding()
            }
            
            Spacer()
        }
    }
}

struct ImmediatelyRecognizeView: View {
    //    @Binding var developerForgives: Bool
    @State private var showText: Bool = false
    
    @Environment(\.dismiss) var dismiss
    
    //    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        VStack {
            Text("你的观点非常赞")
                .font(.title)
                .bold()
                .padding()
            
            Spacer()
            
            Button(action: {
                if showText {
                    // 退出
                    dismiss()
                    //                    presentationMode.wrappedValue.dismiss()
                }
                else {
                    
                    showText = true
                }
            }) {
                Text("正确的")
                    .font(.body)
                    .foregroundColor(.white)
                    .frame(width: 120, height: 40)
                    .background(Color.purple)
                    .cornerRadius(8)
            }
            .padding()
            
            if showText {
                Text("那么请你尝试按一下不认同按钮")
                    .font(.title)
                    .bold()
                    .padding()
            }
            
            Spacer()
        }
    }
}

struct DisagreeView: View {
    @Binding var bgColor: Color
    @State private var showText: Bool = false
    
    @Environment(\.dismiss) var dismiss
    
    //    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        VStack {
            Text("警告⚠️你已被SCP-♾️ 焦晨阳 追杀！请尽快逃离！")
                .font(.title)
                .bold()
                .padding()
            
            Spacer()
            
            Button(action: {
                bgColor = .white
                dismiss()
            }) {
                Text("逃离")
                    .font(.body)
                    .foregroundColor(.white)
                    .frame(width: 120, height: 40)
                    .background(Color.purple)
                    .cornerRadius(8)
            }
            .padding()
            
            if showText {
                Text("那么请你尝试按一下不认同按钮")
                    .font(.title)
                    .bold()
                    .padding()
            }
            
            Spacer()
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(bgColor)
    }
}

@main
struct DarkModeDemoApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

